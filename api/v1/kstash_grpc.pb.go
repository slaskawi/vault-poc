// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KStashClient is the client API for KStash service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KStashClient interface {
	AuthTokenLookup(ctx context.Context, in *AuthTokenLookupRequest, opts ...grpc.CallOption) (*AuthTokenLookupResponse, error)
	AuthTokenRenew(ctx context.Context, in *AuthTokenRenewRequest, opts ...grpc.CallOption) (*AuthTokenRenewResponse, error)
	AuthTokenRevoke(ctx context.Context, in *AuthTokenRevokeRequest, opts ...grpc.CallOption) (*AuthTokenRevokeResponse, error)
	KVList(ctx context.Context, in *KVListRequest, opts ...grpc.CallOption) (*KVListResponse, error)
	KVGet(ctx context.Context, in *KVGetRequest, opts ...grpc.CallOption) (*KVGetResponse, error)
	KVPut(ctx context.Context, in *KVPutRequest, opts ...grpc.CallOption) (*KVPutResponse, error)
	KVDelete(ctx context.Context, in *KVDeleteRequest, opts ...grpc.CallOption) (*KVDeleteResponse, error)
	SystemGenerateAccessToken(ctx context.Context, in *SystemGenerateAccessTokenRequest, opts ...grpc.CallOption) (*SystemGenerateAccessTokenResponse, error)
	SystemGenerateGatekeeperToken(ctx context.Context, in *SystemGenerateGatekeeperTokenRequest, opts ...grpc.CallOption) (*SystemGenerateGatekeeperTokenResponse, error)
	SystemInitialize(ctx context.Context, in *SystemInitializeRequest, opts ...grpc.CallOption) (*SystemInitializeResponse, error)
	SystemRotateAccessKey(ctx context.Context, in *SystemRotateAccessKeyRequest, opts ...grpc.CallOption) (*SystemRotateAccessKeyResponse, error)
	SystemRotateEncryptionKey(ctx context.Context, in *SystemRotateEncryptionKeyRequest, opts ...grpc.CallOption) (*SystemRotateEncryptionKeyResponse, error)
	SystemRotateGatekeeperToken(ctx context.Context, in *SystemRotateGatekeeperTokenRequest, opts ...grpc.CallOption) (*SystemRotateGatekeeperTokenResponse, error)
	SystemRotateUnsealKeys(ctx context.Context, in *SystemRotateUnsealKeysRequest, opts ...grpc.CallOption) (*SystemRotateUnsealKeysResponse, error)
	SystemRevokeGatekeeperToken(ctx context.Context, in *SystemRevokeGatekeeperTokenRequest, opts ...grpc.CallOption) (*SystemRevokeGatekeeperTokenResponse, error)
	SystemSeal(ctx context.Context, in *SystemSealRequest, opts ...grpc.CallOption) (*SystemSealResponse, error)
	SystemStatus(ctx context.Context, in *SystemStatusRequest, opts ...grpc.CallOption) (*SystemStatusResponse, error)
	SystemUnseal(ctx context.Context, in *SystemUnsealRequest, opts ...grpc.CallOption) (*SystemUnsealResponse, error)
}

type kStashClient struct {
	cc grpc.ClientConnInterface
}

func NewKStashClient(cc grpc.ClientConnInterface) KStashClient {
	return &kStashClient{cc}
}

func (c *kStashClient) AuthTokenLookup(ctx context.Context, in *AuthTokenLookupRequest, opts ...grpc.CallOption) (*AuthTokenLookupResponse, error) {
	out := new(AuthTokenLookupResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/AuthTokenLookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) AuthTokenRenew(ctx context.Context, in *AuthTokenRenewRequest, opts ...grpc.CallOption) (*AuthTokenRenewResponse, error) {
	out := new(AuthTokenRenewResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/AuthTokenRenew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) AuthTokenRevoke(ctx context.Context, in *AuthTokenRevokeRequest, opts ...grpc.CallOption) (*AuthTokenRevokeResponse, error) {
	out := new(AuthTokenRevokeResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/AuthTokenRevoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) KVList(ctx context.Context, in *KVListRequest, opts ...grpc.CallOption) (*KVListResponse, error) {
	out := new(KVListResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/KVList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) KVGet(ctx context.Context, in *KVGetRequest, opts ...grpc.CallOption) (*KVGetResponse, error) {
	out := new(KVGetResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/KVGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) KVPut(ctx context.Context, in *KVPutRequest, opts ...grpc.CallOption) (*KVPutResponse, error) {
	out := new(KVPutResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/KVPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) KVDelete(ctx context.Context, in *KVDeleteRequest, opts ...grpc.CallOption) (*KVDeleteResponse, error) {
	out := new(KVDeleteResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/KVDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) SystemGenerateAccessToken(ctx context.Context, in *SystemGenerateAccessTokenRequest, opts ...grpc.CallOption) (*SystemGenerateAccessTokenResponse, error) {
	out := new(SystemGenerateAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/SystemGenerateAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) SystemGenerateGatekeeperToken(ctx context.Context, in *SystemGenerateGatekeeperTokenRequest, opts ...grpc.CallOption) (*SystemGenerateGatekeeperTokenResponse, error) {
	out := new(SystemGenerateGatekeeperTokenResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/SystemGenerateGatekeeperToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) SystemInitialize(ctx context.Context, in *SystemInitializeRequest, opts ...grpc.CallOption) (*SystemInitializeResponse, error) {
	out := new(SystemInitializeResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/SystemInitialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) SystemRotateAccessKey(ctx context.Context, in *SystemRotateAccessKeyRequest, opts ...grpc.CallOption) (*SystemRotateAccessKeyResponse, error) {
	out := new(SystemRotateAccessKeyResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/SystemRotateAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) SystemRotateEncryptionKey(ctx context.Context, in *SystemRotateEncryptionKeyRequest, opts ...grpc.CallOption) (*SystemRotateEncryptionKeyResponse, error) {
	out := new(SystemRotateEncryptionKeyResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/SystemRotateEncryptionKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) SystemRotateGatekeeperToken(ctx context.Context, in *SystemRotateGatekeeperTokenRequest, opts ...grpc.CallOption) (*SystemRotateGatekeeperTokenResponse, error) {
	out := new(SystemRotateGatekeeperTokenResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/SystemRotateGatekeeperToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) SystemRotateUnsealKeys(ctx context.Context, in *SystemRotateUnsealKeysRequest, opts ...grpc.CallOption) (*SystemRotateUnsealKeysResponse, error) {
	out := new(SystemRotateUnsealKeysResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/SystemRotateUnsealKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) SystemRevokeGatekeeperToken(ctx context.Context, in *SystemRevokeGatekeeperTokenRequest, opts ...grpc.CallOption) (*SystemRevokeGatekeeperTokenResponse, error) {
	out := new(SystemRevokeGatekeeperTokenResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/SystemRevokeGatekeeperToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) SystemSeal(ctx context.Context, in *SystemSealRequest, opts ...grpc.CallOption) (*SystemSealResponse, error) {
	out := new(SystemSealResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/SystemSeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) SystemStatus(ctx context.Context, in *SystemStatusRequest, opts ...grpc.CallOption) (*SystemStatusResponse, error) {
	out := new(SystemStatusResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/SystemStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kStashClient) SystemUnseal(ctx context.Context, in *SystemUnsealRequest, opts ...grpc.CallOption) (*SystemUnsealResponse, error) {
	out := new(SystemUnsealResponse)
	err := c.cc.Invoke(ctx, "/kstash.v1.KStash/SystemUnseal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KStashServer is the server API for KStash service.
// All implementations must embed UnimplementedKStashServer
// for forward compatibility
type KStashServer interface {
	AuthTokenLookup(context.Context, *AuthTokenLookupRequest) (*AuthTokenLookupResponse, error)
	AuthTokenRenew(context.Context, *AuthTokenRenewRequest) (*AuthTokenRenewResponse, error)
	AuthTokenRevoke(context.Context, *AuthTokenRevokeRequest) (*AuthTokenRevokeResponse, error)
	KVList(context.Context, *KVListRequest) (*KVListResponse, error)
	KVGet(context.Context, *KVGetRequest) (*KVGetResponse, error)
	KVPut(context.Context, *KVPutRequest) (*KVPutResponse, error)
	KVDelete(context.Context, *KVDeleteRequest) (*KVDeleteResponse, error)
	SystemGenerateAccessToken(context.Context, *SystemGenerateAccessTokenRequest) (*SystemGenerateAccessTokenResponse, error)
	SystemGenerateGatekeeperToken(context.Context, *SystemGenerateGatekeeperTokenRequest) (*SystemGenerateGatekeeperTokenResponse, error)
	SystemInitialize(context.Context, *SystemInitializeRequest) (*SystemInitializeResponse, error)
	SystemRotateAccessKey(context.Context, *SystemRotateAccessKeyRequest) (*SystemRotateAccessKeyResponse, error)
	SystemRotateEncryptionKey(context.Context, *SystemRotateEncryptionKeyRequest) (*SystemRotateEncryptionKeyResponse, error)
	SystemRotateGatekeeperToken(context.Context, *SystemRotateGatekeeperTokenRequest) (*SystemRotateGatekeeperTokenResponse, error)
	SystemRotateUnsealKeys(context.Context, *SystemRotateUnsealKeysRequest) (*SystemRotateUnsealKeysResponse, error)
	SystemRevokeGatekeeperToken(context.Context, *SystemRevokeGatekeeperTokenRequest) (*SystemRevokeGatekeeperTokenResponse, error)
	SystemSeal(context.Context, *SystemSealRequest) (*SystemSealResponse, error)
	SystemStatus(context.Context, *SystemStatusRequest) (*SystemStatusResponse, error)
	SystemUnseal(context.Context, *SystemUnsealRequest) (*SystemUnsealResponse, error)
	mustEmbedUnimplementedKStashServer()
}

// UnimplementedKStashServer must be embedded to have forward compatible implementations.
type UnimplementedKStashServer struct {
}

func (UnimplementedKStashServer) AuthTokenLookup(context.Context, *AuthTokenLookupRequest) (*AuthTokenLookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthTokenLookup not implemented")
}
func (UnimplementedKStashServer) AuthTokenRenew(context.Context, *AuthTokenRenewRequest) (*AuthTokenRenewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthTokenRenew not implemented")
}
func (UnimplementedKStashServer) AuthTokenRevoke(context.Context, *AuthTokenRevokeRequest) (*AuthTokenRevokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthTokenRevoke not implemented")
}
func (UnimplementedKStashServer) KVList(context.Context, *KVListRequest) (*KVListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVList not implemented")
}
func (UnimplementedKStashServer) KVGet(context.Context, *KVGetRequest) (*KVGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVGet not implemented")
}
func (UnimplementedKStashServer) KVPut(context.Context, *KVPutRequest) (*KVPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVPut not implemented")
}
func (UnimplementedKStashServer) KVDelete(context.Context, *KVDeleteRequest) (*KVDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVDelete not implemented")
}
func (UnimplementedKStashServer) SystemGenerateAccessToken(context.Context, *SystemGenerateAccessTokenRequest) (*SystemGenerateAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemGenerateAccessToken not implemented")
}
func (UnimplementedKStashServer) SystemGenerateGatekeeperToken(context.Context, *SystemGenerateGatekeeperTokenRequest) (*SystemGenerateGatekeeperTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemGenerateGatekeeperToken not implemented")
}
func (UnimplementedKStashServer) SystemInitialize(context.Context, *SystemInitializeRequest) (*SystemInitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemInitialize not implemented")
}
func (UnimplementedKStashServer) SystemRotateAccessKey(context.Context, *SystemRotateAccessKeyRequest) (*SystemRotateAccessKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemRotateAccessKey not implemented")
}
func (UnimplementedKStashServer) SystemRotateEncryptionKey(context.Context, *SystemRotateEncryptionKeyRequest) (*SystemRotateEncryptionKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemRotateEncryptionKey not implemented")
}
func (UnimplementedKStashServer) SystemRotateGatekeeperToken(context.Context, *SystemRotateGatekeeperTokenRequest) (*SystemRotateGatekeeperTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemRotateGatekeeperToken not implemented")
}
func (UnimplementedKStashServer) SystemRotateUnsealKeys(context.Context, *SystemRotateUnsealKeysRequest) (*SystemRotateUnsealKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemRotateUnsealKeys not implemented")
}
func (UnimplementedKStashServer) SystemRevokeGatekeeperToken(context.Context, *SystemRevokeGatekeeperTokenRequest) (*SystemRevokeGatekeeperTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemRevokeGatekeeperToken not implemented")
}
func (UnimplementedKStashServer) SystemSeal(context.Context, *SystemSealRequest) (*SystemSealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemSeal not implemented")
}
func (UnimplementedKStashServer) SystemStatus(context.Context, *SystemStatusRequest) (*SystemStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemStatus not implemented")
}
func (UnimplementedKStashServer) SystemUnseal(context.Context, *SystemUnsealRequest) (*SystemUnsealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemUnseal not implemented")
}
func (UnimplementedKStashServer) mustEmbedUnimplementedKStashServer() {}

// UnsafeKStashServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KStashServer will
// result in compilation errors.
type UnsafeKStashServer interface {
	mustEmbedUnimplementedKStashServer()
}

func RegisterKStashServer(s grpc.ServiceRegistrar, srv KStashServer) {
	s.RegisterService(&KStash_ServiceDesc, srv)
}

func _KStash_AuthTokenLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthTokenLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).AuthTokenLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/AuthTokenLookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).AuthTokenLookup(ctx, req.(*AuthTokenLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_AuthTokenRenew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthTokenRenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).AuthTokenRenew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/AuthTokenRenew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).AuthTokenRenew(ctx, req.(*AuthTokenRenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_AuthTokenRevoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthTokenRevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).AuthTokenRevoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/AuthTokenRevoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).AuthTokenRevoke(ctx, req.(*AuthTokenRevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_KVList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).KVList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/KVList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).KVList(ctx, req.(*KVListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_KVGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).KVGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/KVGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).KVGet(ctx, req.(*KVGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_KVPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).KVPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/KVPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).KVPut(ctx, req.(*KVPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_KVDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).KVDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/KVDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).KVDelete(ctx, req.(*KVDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_SystemGenerateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemGenerateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).SystemGenerateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/SystemGenerateAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).SystemGenerateAccessToken(ctx, req.(*SystemGenerateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_SystemGenerateGatekeeperToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemGenerateGatekeeperTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).SystemGenerateGatekeeperToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/SystemGenerateGatekeeperToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).SystemGenerateGatekeeperToken(ctx, req.(*SystemGenerateGatekeeperTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_SystemInitialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemInitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).SystemInitialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/SystemInitialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).SystemInitialize(ctx, req.(*SystemInitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_SystemRotateAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemRotateAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).SystemRotateAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/SystemRotateAccessKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).SystemRotateAccessKey(ctx, req.(*SystemRotateAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_SystemRotateEncryptionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemRotateEncryptionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).SystemRotateEncryptionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/SystemRotateEncryptionKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).SystemRotateEncryptionKey(ctx, req.(*SystemRotateEncryptionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_SystemRotateGatekeeperToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemRotateGatekeeperTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).SystemRotateGatekeeperToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/SystemRotateGatekeeperToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).SystemRotateGatekeeperToken(ctx, req.(*SystemRotateGatekeeperTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_SystemRotateUnsealKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemRotateUnsealKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).SystemRotateUnsealKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/SystemRotateUnsealKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).SystemRotateUnsealKeys(ctx, req.(*SystemRotateUnsealKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_SystemRevokeGatekeeperToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemRevokeGatekeeperTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).SystemRevokeGatekeeperToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/SystemRevokeGatekeeperToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).SystemRevokeGatekeeperToken(ctx, req.(*SystemRevokeGatekeeperTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_SystemSeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemSealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).SystemSeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/SystemSeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).SystemSeal(ctx, req.(*SystemSealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_SystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).SystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/SystemStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).SystemStatus(ctx, req.(*SystemStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KStash_SystemUnseal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemUnsealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KStashServer).SystemUnseal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstash.v1.KStash/SystemUnseal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KStashServer).SystemUnseal(ctx, req.(*SystemUnsealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KStash_ServiceDesc is the grpc.ServiceDesc for KStash service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KStash_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kstash.v1.KStash",
	HandlerType: (*KStashServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthTokenLookup",
			Handler:    _KStash_AuthTokenLookup_Handler,
		},
		{
			MethodName: "AuthTokenRenew",
			Handler:    _KStash_AuthTokenRenew_Handler,
		},
		{
			MethodName: "AuthTokenRevoke",
			Handler:    _KStash_AuthTokenRevoke_Handler,
		},
		{
			MethodName: "KVList",
			Handler:    _KStash_KVList_Handler,
		},
		{
			MethodName: "KVGet",
			Handler:    _KStash_KVGet_Handler,
		},
		{
			MethodName: "KVPut",
			Handler:    _KStash_KVPut_Handler,
		},
		{
			MethodName: "KVDelete",
			Handler:    _KStash_KVDelete_Handler,
		},
		{
			MethodName: "SystemGenerateAccessToken",
			Handler:    _KStash_SystemGenerateAccessToken_Handler,
		},
		{
			MethodName: "SystemGenerateGatekeeperToken",
			Handler:    _KStash_SystemGenerateGatekeeperToken_Handler,
		},
		{
			MethodName: "SystemInitialize",
			Handler:    _KStash_SystemInitialize_Handler,
		},
		{
			MethodName: "SystemRotateAccessKey",
			Handler:    _KStash_SystemRotateAccessKey_Handler,
		},
		{
			MethodName: "SystemRotateEncryptionKey",
			Handler:    _KStash_SystemRotateEncryptionKey_Handler,
		},
		{
			MethodName: "SystemRotateGatekeeperToken",
			Handler:    _KStash_SystemRotateGatekeeperToken_Handler,
		},
		{
			MethodName: "SystemRotateUnsealKeys",
			Handler:    _KStash_SystemRotateUnsealKeys_Handler,
		},
		{
			MethodName: "SystemRevokeGatekeeperToken",
			Handler:    _KStash_SystemRevokeGatekeeperToken_Handler,
		},
		{
			MethodName: "SystemSeal",
			Handler:    _KStash_SystemSeal_Handler,
		},
		{
			MethodName: "SystemStatus",
			Handler:    _KStash_SystemStatus_Handler,
		},
		{
			MethodName: "SystemUnseal",
			Handler:    _KStash_SystemUnseal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kstash.proto",
}
